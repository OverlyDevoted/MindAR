/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/src/gestures.js":
/*!********************************!*\
  !*** ./public/src/gestures.js ***!
  \********************************/
/***/ (() => {

eval("/* global AFRAME, THREE */\r\n\r\nAFRAME.registerComponent(\"gesture-handler\", {\r\n    schema: {\r\n      enabled: { default: true },\r\n      rotationFactor: { default: 5 },\r\n      minScale: { default: 0.3 },\r\n      maxScale: { default: 8 },\r\n    },\r\n  \r\n    init: function () {\r\n      console.log(\"Init\");\r\n      this.handleScale = this.handleScale.bind(this);\r\n      this.handleRotation = this.handleRotation.bind(this);\r\n  \r\n      this.isVisible = false;\r\n      this.initialScale = this.el.object3D.scale.clone();\r\n      this.scaleFactor = 1;\r\n      this.el.sceneEl.addEventListener(\"targetFound\", (e) => {\r\n        this.isVisible = true;\r\n      });\r\n  \r\n      this.el.sceneEl.addEventListener(\"targetLost\", (e) => {\r\n        this.isVisible = false;\r\n      });\r\n    },\r\n  \r\n    update: function () {\r\n      if (this.data.enabled) {\r\n        this.el.sceneEl.addEventListener(\"onefingermove\", this.handleRotation);\r\n        this.el.sceneEl.addEventListener(\"twofingermove\", this.handleScale);\r\n      } else {\r\n        this.el.sceneEl.removeEventListener(\"onefingermove\", this.handleRotation);\r\n        this.el.sceneEl.removeEventListener(\"twofingermove\", this.handleScale);\r\n      }\r\n    },\r\n  \r\n    remove: function () {\r\n      this.el.sceneEl.removeEventListener(\"onefingermove\", this.handleRotation);\r\n      this.el.sceneEl.removeEventListener(\"twofingermove\", this.handleScale);\r\n    },\r\n  \r\n    /*handleRotation: function (event) {\r\n      if (this.isVisible) {\r\n        this.el.object3D.rotation.y +=\r\n          event.detail.positionChange.x * this.data.rotationFactor;\r\n        this.el.object3D.rotation.x +=\r\n          event.detail.positionChange.y * this.data.rotationFactor;\r\n      }\r\n    },*/\r\n  \r\n    handleScale: function (event) {\r\n      if (this.isVisible) {\r\n        this.scaleFactor *=\r\n          1 + event.detail.spreadChange / event.detail.startSpread;\r\n  \r\n        this.scaleFactor = Math.min(\r\n          Math.max(this.scaleFactor, this.data.minScale),\r\n          this.data.maxScale\r\n        );\r\n  \r\n        this.el.object3D.scale.x = this.scaleFactor * this.initialScale.x;\r\n        this.el.object3D.scale.y = this.scaleFactor * this.initialScale.y;\r\n        this.el.object3D.scale.z = this.scaleFactor * this.initialScale.z;\r\n      }\r\n    },\r\n  });\r\n  \r\n  // Component that detects and emits events for touch gestures\r\n  \r\n  AFRAME.registerComponent(\"gesture-detector\", {\r\n    schema: {\r\n      element: { default: \"\" }\r\n    },\r\n  \r\n    init: function() {\r\n      this.targetElement =\r\n        this.data.element && document.querySelector(this.data.element);\r\n  \r\n      if (!this.targetElement) {\r\n        this.targetElement = this.el;\r\n      }\r\n  \r\n      this.internalState = {\r\n        previousState: null\r\n      };\r\n  \r\n      this.emitGestureEvent = this.emitGestureEvent.bind(this);\r\n  \r\n      this.targetElement.addEventListener(\"touchstart\", this.emitGestureEvent);\r\n  \r\n      this.targetElement.addEventListener(\"touchend\", this.emitGestureEvent);\r\n  \r\n      this.targetElement.addEventListener(\"touchmove\", this.emitGestureEvent);\r\n    },\r\n  \r\n    remove: function() {\r\n      this.targetElement.removeEventListener(\"touchstart\", this.emitGestureEvent);\r\n  \r\n      this.targetElement.removeEventListener(\"touchend\", this.emitGestureEvent);\r\n  \r\n      this.targetElement.removeEventListener(\"touchmove\", this.emitGestureEvent);\r\n    },\r\n  \r\n    emitGestureEvent(event) {\r\n      const currentState = this.getTouchState(event);\r\n  \r\n      const previousState = this.internalState.previousState;\r\n  \r\n      const gestureContinues =\r\n        previousState &&\r\n        currentState &&\r\n        currentState.touchCount == previousState.touchCount;\r\n  \r\n      const gestureEnded = previousState && !gestureContinues;\r\n  \r\n      const gestureStarted = currentState && !gestureContinues;\r\n  \r\n      if (gestureEnded) {\r\n        const eventName =\r\n          this.getEventPrefix(previousState.touchCount) + \"fingerend\";\r\n  \r\n        this.el.emit(eventName, previousState);\r\n  \r\n        this.internalState.previousState = null;\r\n      }\r\n  \r\n      if (gestureStarted) {\r\n        currentState.startTime = performance.now();\r\n  \r\n        currentState.startPosition = currentState.position;\r\n  \r\n        currentState.startSpread = currentState.spread;\r\n  \r\n        const eventName =\r\n          this.getEventPrefix(currentState.touchCount) + \"fingerstart\";\r\n  \r\n        this.el.emit(eventName, currentState);\r\n  \r\n        this.internalState.previousState = currentState;\r\n      }\r\n  \r\n      if (gestureContinues) {\r\n        const eventDetail = {\r\n          positionChange: {\r\n            x: currentState.position.x - previousState.position.x,\r\n  \r\n            y: currentState.position.y - previousState.position.y\r\n          }\r\n        };\r\n  \r\n        if (currentState.spread) {\r\n          eventDetail.spreadChange = currentState.spread - previousState.spread;\r\n        }\r\n  \r\n        // Update state with new data\r\n  \r\n        Object.assign(previousState, currentState);\r\n  \r\n        // Add state data to event detail\r\n  \r\n        Object.assign(eventDetail, previousState);\r\n  \r\n        const eventName =\r\n          this.getEventPrefix(currentState.touchCount) + \"fingermove\";\r\n  \r\n        this.el.emit(eventName, eventDetail);\r\n      }\r\n    },\r\n  \r\n    getTouchState: function(event) {\r\n      if (event.touches.length === 0) {\r\n        return null;\r\n      }\r\n  \r\n      // Convert event.touches to an array so we can use reduce\r\n  \r\n      const touchList = [];\r\n  \r\n      for (let i = 0; i < event.touches.length; i++) {\r\n        touchList.push(event.touches[i]);\r\n      }\r\n  \r\n      const touchState = {\r\n        touchCount: touchList.length\r\n      };\r\n  \r\n      // Calculate center of all current touches\r\n  \r\n      const centerPositionRawX =\r\n        touchList.reduce((sum, touch) => sum + touch.clientX, 0) /\r\n        touchList.length;\r\n  \r\n      const centerPositionRawY =\r\n        touchList.reduce((sum, touch) => sum + touch.clientY, 0) /\r\n        touchList.length;\r\n  \r\n      touchState.positionRaw = { x: centerPositionRawX, y: centerPositionRawY };\r\n  \r\n      // Scale touch position and spread by average of window dimensions\r\n  \r\n      const screenScale = 2 / (window.innerWidth + window.innerHeight);\r\n  \r\n      touchState.position = {\r\n        x: centerPositionRawX * screenScale,\r\n        y: centerPositionRawY * screenScale\r\n      };\r\n  \r\n      // Calculate average spread of touches from the center point\r\n  \r\n      if (touchList.length >= 2) {\r\n        const spread =\r\n          touchList.reduce((sum, touch) => {\r\n            return (\r\n              sum +\r\n              Math.sqrt(\r\n                Math.pow(centerPositionRawX - touch.clientX, 2) +\r\n                  Math.pow(centerPositionRawY - touch.clientY, 2)\r\n              )\r\n            );\r\n          }, 0) / touchList.length;\r\n  \r\n        touchState.spread = spread * screenScale;\r\n      }\r\n  \r\n      return touchState;\r\n    },\r\n  \r\n    getEventPrefix(touchCount) {\r\n      const numberNames = [\"one\", \"two\", \"three\", \"many\"];\r\n  \r\n      return numberNames[Math.min(touchCount, 4) - 1];\r\n    }\r\n  });\n\n//# sourceURL=webpack:///./public/src/gestures.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/src/gestures.js"]();
/******/ 	
/******/ })()
;